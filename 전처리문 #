http://sarghis.com/blog/802/

전처리문이란?
실질적인 컴파일 이전에 미리 처리되는 문장을 가리킨다. 선행처리기라고도 한다. 따라서 컴파일러는 사용자가 작성한 코드를 컴파일하기 전에 전처리문에서 정의해 놓은 작업들을 먼저 수행한다.

종류로는 #define, #if, #ifdef, #ifndef, #defined, #undef 등이 있다. 이것은 기존에 있는 방대한 소스 코드를 지우지 않고 활성화 비활성화 하는 데에 가장 많이 이용된다. 즉, 기존에 있는 소스 코드를 건드리지 않는 상태에서 부분적인 컴파일을 하는 것이다.
C의 전처리문이 오는 줄(Line)의 첫 문자는 항상 ‘#’으로 시작한다. ANSI 표준에 따른 C의 전처리문의 종류가 아래에 나와 있다.

파일 처리를 위한 전처리문 : #include
형태 정의를 위한 전처리문 : #define, #undef
조건 처리를 위한 전처리문 : #if, #ifdef, #ifndef, #else, #elif, #endif
에러 처리를 위한 전처리문 : #error
디버깅을 위한 전처리문 : #line
컴파일 옵션 처리를 위한 전처리문 : #pragma
 

조건 처리를 위한 전처리문은 어떤 조건에 대한 검사를 하고 그 결과를 참(0 이 아닌 값) 또는 거짓(0)으로 돌려준다.

#if : …이 참이라면
#ifdef : …이 정의되어 있다면
#else : #if나 #ifdef에 대응된다.
#elif : “else + if”의 의미
#endif : #if, #ifdef, #infdef 이 끝났음을 알린다.

 

#include
헤더 파일과 같은 외부 파일을 읽어서 포함시키고자 할 때 사용된다. 이때의 파일은 이진파일(Binary file)이 아닌 C의 소스파일과 같은 형태의 일반 문서파일을 말한다.

1
2
#include <stdio.h>    /* 이 위치에 stdio.h라는 파일을 포함시킨다. */
#include "text.h"   /* 이 위치에 text.h라는 파일을 포함시킨다. */
‘<…>’를 사용할 때와 ‘”…”‘를 사용할 때의 차이점은 ‘<…>’는 컴파일러의 표준 포함 파일 디렉토리(또는 사용자가 별도로 지정해 준)에서 파일을 찾는 것을 기본으로 한다. 그리고 “…”‘를 사용했을 때는 현재의 디렉토리를 기본으로 파일을 찾게 된다. 아예 디렉토리를 같이 지정할 수도 있다.

1
2
#include <C:\MYDIR\MYHEAD.H>
#include "C:\MYDIR\MYHEAD.H"
 

#define
상수값을 지정하기 위한 예약어로 매크로라고 부른다. 구문의 상수로 치환한다.
또한 #define은 함수 역활과 비슷하게 아래와 같이 쓰일 수 있다.

1
#define SUM(x) ((x) = (x) + (x))
동작원리는 함수와 같다. 말 그대로 main소스에서 SUM을 호출하면 옆에 있는 더하기 코드가 치환되는 것이다.

 

#define으로 정의할 수 있는 것은 숫자만이 아니다.

1
2
#define MYNAME "Young Hee"
printf(MYNAME);
라고 한다면 이는 전처리기에 의해

1
printf("Young Hee");
와 같이 전개되는 것이다.

이렇게 #define으로 정의된 것은 일반적인 변수와는 다르다. 그 차이는 명백한데, 예를 들어서

1
2
#define MYNAME "Turbo"
char my_name[] = "Turbo"
의 두가지 경우가 있다고 하자. “MYNAME”은 전처리문으로 “my_name”은 문자형 배열 변수로 정의되었다.

1
2
3
4
printf(MYNAME);
printf(MYNAME);
printf(my_name);
printf(my_name);
이것을 전처리한 상태는 다음과 같이 될 것이다.

1
2
3
4
printf("Turbo");
printf("Turbo");
printf(my_name);
printf(my_name);
이런 결과에서 우리가 유추해 볼 수 있는 것은 전처리 명령을 사용했을 경우 “Turbo”라는 동일한 동작에 대해서 두개의 똑같은 문자열이 사용됐고, 변수를 사용했을 경우에는 하나의 문자열을 가지고 두번을 사용하고 있다는 것이다. 결과적으로 이런 경우에는 전처리문을 사용했을 경우 메모리 낭비를 가져 온다는 것을 알 수 있다.

 

#undef
#define으로 이미 정의된 매크로를 무효화한다.

1
2
#define ADD(a, b) (a + b)
#undef ADD(a, b)
라고 하면 앞으로 사용되는 ADD(…)는 ‘undefined symbol’이 되어 에러 처리 된다.

 

#if ~ #endif
#if 구문은 if랑 아주 비슷하다. 이것은 어떠한 구문을 컴파일 할지 안할지를 지정할 수 있다.

1
2
3
4
#define A 1
#if A
    source code.....
#endif
위 source code 부분은 컴파일이 된다. if문에서와 같이 참, 거짓을 구분하여 컴파일이 된다. 위에서 A값은 1 즉 0보다 큰 수이기 때문에 참인 것이다.
직접 아래와 같이 하면 거짓이기 때문에 source code 부분은 컴파일이 되지 않는다.

1
2
3
#if 0
    source code....
#endif
 

#ifdef ~ #endif
컴파일 할 때

1
2
3
4
5
6
#define MYDEF /* MYDEF는 값은 가지지 않았지만 어쨋든 정의는 되었다 */
#ifdef YOURDEF /* 만약 YOURDEF가 정의되어 있다면... */
    #define BASE 10 /* BASE == 10 */
#elif MYDEF /* 그외에 MYDEF가 정의되었다면... */
    #define BASE 2 /* BASE == 2 */
#endif
와 같이 쓰면 BASE는 상수 2로 치환되어 전처리기가 컴파일러에게 넘겨준다.

 

#ifndef 헤더명_H__ ~ #endif
헤더파일이 겹치는 것을 막기 위한 일종의 매크로이다. 예를 들어 헤더파일에 어떤 클래스의 인터페이스 선언을 넣었다고 하자. 이 클래스 인터페이스에서 다른 파일의 프로토타입이 필요해서 다른 A 파일을 include 하고 있는데 이 헤더 파일을 include 하는 파일에서 A라는 헤더 파일을 이미 include 하고 있다면 두번 define한 것이 된다. 그러면 SYNTAX 에러가 난다. 그래서 그런 것을 막는 방법의 하나로 #ifndef을 사용한다. 이전에 include되어 있으면 #endif쪽으로 점프해버려 결국 한번 선언되는 것이다.

1
2
#include <stdio.h> ------ (a)
#include <stdio.h> ------ (b)
위와 같이 동일한 구문을 두번 썼다고 하자. 그런데 앞에 이미 include를 했는데 밑에 또 한다면 문제가 된다. 컴파일러가 검사해야할 코드량도 많아진다. 그래서 stdio.h에는

1
2
#ifndef STDIO_H__
#define STDIO_H__
가 선언되어 있다. 만약 STDIO_H가 선언되어 있지 않다면 선언한다는 뜻이다. 그 뒤 (b)에서는 이미 (a)쪽에서 STDIO_H__ 을 선언한 상태이기 때문에 전처리기 쪽에서 무시해버린다. 그러므로 컴파일러는 (a)만 검사한다.

 

#defined
define이 여러 개 되어 있는지를 검사할 때 쓴다. 이것은 여러 개를 동시에 검사 할 수 있다.

1
#if #defined A || #defined B
 

#ifdef와 #if defined의 차이
#ifdef는 정의가 되어 있는지를 테스트 하기 때문에, 한번에 여러 개를 사용할 수 없다. 형식이

1
#ifdef name
처럼, 하나의 토큰이 되어야 하기 때문이다.

여러 개가 정의되어 있는지를 테스트 하기 위해서는

1
#if defined(MACRO1) || defined(MACRO2)
처럼 사용한다.
#if는 ||로 중첩해서 사용할 수 있다. 형식이, #if expression이므로, C 표현이 올 수 있다.

1
#if MACRO1 || MACRO2
처럼 사용해도 된다.

 

#error
소스 라인에 직접 에러 메세지를 출력한다. 전처리기가 #error 문을 만나면 그 즉시 컴파일을 중단하고 다음과 같은 에러 메시지를 출력한다.
ERROR : XXXXX.c ########: Error directive: 내용
– XXXXX.c –> 현재 컴파일 중인 파일명
– ####### –> 전처리기가 #error 문을 만난 시점에서의 행 번호(헤더 포함)

1
2
3
#ifdef __LARGE__
    #error This program must be compiled in LARGE memory model!
#endif
이 내용은 만일 프로그램이 LARGE 모델이 아니라면 “#error” 뒤에 표시된 메세지를 출력하고 컴파일을 중지하게 된다.

 

#line
이 명령은 소스 코드의 행번호를 지정하기 위한 것으로 주로 컴파일러에 의해 미리 정의된 __LINE__과 함께 사용된다. C에서는 베이식과 같은 행번호를 사용하지 않는다. 하지만 디버깅을 하다 보면 “행번호를 알 수 있으면 좋을텐데”하는 경우가 있다. 예를 들자면 어떤 표현들이 있고, 그 표현들 중의 어딘가에 잘못된 부분이 있는 것 같은데 정확히 그 표현이 있는 행을 찾지 못한다면 “#line”을 사용함으로써 그 일을 보다 수월하게 할 수 있게 된다.
__LINE__과 __FILE__을 각각 행번호와 파일명으로 변경한다.

01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
#include <stdio.h>
#define DEBUG
void main(void)
{
    int count = 100;
    #line 100 /* 다음 줄번호를 100으로 설정한다 */
    /* <-- 이 줄의 번호가 100이다 */
    #ifdef DEBUG /* <-- 이 줄의 번호가 101이다 */
        printf("line:%d, count = %d\n", __LINE__, count);
    #endif
    count = count * count - 56;
    #ifdef DEBUG
        printf("line:%d, count = %d\n", __LINE__, count);
    #endif
    count = count / 2 + 48;
    #ifdef DEBUG
        printf("line:%d, count = %d\n", __LINE__, count);
    #endif
}
 

C의 predefined macro
__FILE__	a string that holds the path/name of the compiled file
__LINE__	an integer that holds the number of the current line number
__DATE__	a string that holds the current system date
__TIME__	a string that holds the current system time
__STDC__	defined as the value ‘1’ if the compiler conforms with the ANSI C standard
__cplusplus	determines if your compiler is in C or C++ mode. Usually used in headers
 

예)

1
#include <stdio.h>
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
void main(void)  
{  
    printf("The path/name of this file is %s\n", __FILE__);  
    printf("The current line is %d\n", __LINE__);  
    printf("The current system date is %s\n", __DATE__);  
    printf("The current system time is %s\n", __TIME__);  
    #ifdef __STDC__  
        printf("The compiler conforms with the ANSI C standard\n");  
    #else  
        printf("The compiler doesn't conform with the ANSI C standard\n");  
    #endif  
    #ifdef __cplusplus  
        printf("The compiler is working with C++\n");  
    #else  
        printf("The compiler is working with C\n");  
    #endif  
}
 

프로그래머들 마다 코딩 스타일(암시적 약속)이 있다. 보통 매크로, const 변수는 대문자로 적는 것이 원칙이다. 매크로 함수와 일반함수, 매크로 대상체(object-like macro)와 일반 변수를 구분하기 쉽게 해주는 것이기 때문이다.

#define STDIO_H_
왜 뒤에 _를 붙였을까? 이것도 하나의 암시적 약속이다. 컴파일러 제작회사는 매크로를 정의할 때 사용자들과 이름이 충돌이 나지 않게 하기 위해서 대부분 _를 뒤어 덧붙인다. 또한 _를 하나 혹은 두 개 연속으로 시작하는 것은 컴파일러 내부에서 사용하는 매크로라는 성격이 강하다. 물론 강제적인 뜻은 없으며 단지 관습상 그렇다. 왜 이것이 관습이 되었나 하면 보통 매크로 변수 이름이나 함수 이름을 지을 때 뒤에 _를 붙이지 않기 때문이다. 그래서 함수 제작자들이 _를 단골로 붙였다.
